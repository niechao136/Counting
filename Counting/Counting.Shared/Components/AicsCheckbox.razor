<div
  class="@CheckboxClass"
  @onclick="Click"
  @onmouseenter="Mouseenter"
  @onmouseleave="Mouseleave">
  <div class="selection-checkbox-box">
    <input
      type="checkbox"
      class="@InputClass"
      @bind-value="@CurrentValue"
      name="@Name"
      id="@_id"
      disabled="@Disable"
      checked="@CurrentValue"/>
  </div>
  @if (ShowText)
  {
    <label class="selection-checkbox--text" for="@_id">
      @Text
    </label>
  }
  <div class="@ModalClass"></div>
</div>

@code {
  [Parameter] public bool Value { get; set; }
  [Parameter] public bool Disable { get; set; }
  [Parameter] public string Text { get; set; } = string.Empty;
  [Parameter] public string Class { get; set; } = string.Empty;
  [Parameter] public string Name { get; set; } = $"CheckboxName_{Guid.NewGuid()}";
  [Parameter] public string Mode { get; set; } = CheckboxMode.Normal;
  [Parameter] public bool AllowDash { get; set; }
  [Parameter] public bool FontBold { get; set; }
  [Parameter] public EventCallback<bool> ValueChanged { get; set; }
  [Parameter] public EventCallback<bool> OnChange { get; set; }
  [Parameter] public EventCallback<bool> OnInput { get; set; }
  [Parameter] public EventCallback<string> ModeChanged { get; set; }

  private readonly string _id = $"CheckboxID_{Guid.NewGuid()}";
  private bool _isHover;

  private bool CurrentValue
  {
    get => Value;
    set
    {
      Value = value;
      ValueChanged.InvokeAsync(Value);
      OnChange.InvokeAsync(Value);
      OnInput.InvokeAsync(Value);
    }
  }

  private string CurrentMode
  {
    get => Mode;
    set
    {
      Mode = value;
      ModeChanged.InvokeAsync(Mode);
    }
  }
  private string CheckboxClass
  {
    get
    {
      var checkboxClass = "selection-checkbox";
      if (Disable) checkboxClass += " selection-checkbox--disabled";
      if (_isHover) checkboxClass += " selection-checkbox__hover";
      checkboxClass += $" selection-checkbox--{(CurrentValue ? "selected" : "unselected")}";
      checkboxClass += $" font-weight-{(FontBold ? "700" : "400")}";
      if (!string.IsNullOrEmpty(Class)) checkboxClass += $" {Class}";
      return checkboxClass;
    }
  }
  private string InputClass => $"selection-checkbox-{CurrentMode}";
  private string ModalClass =>
    $"selection-checkbox--modal {(Disable ? "selection-checkbox--modal--disabled" : string.Empty)}";
  private bool ShowText => !string.IsNullOrEmpty(Text);

  private void Click()
  {
    if (Disable) return;
    if (!AllowDash || CurrentMode == CheckboxMode.Normal) CurrentValue = !CurrentValue;
    else CurrentMode = CheckboxMode.Normal;
  }
  private void Mouseenter()
  {
    _isHover = true;
  }
  private void Mouseleave()
  {
    _isHover = false;
  }

}