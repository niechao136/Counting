<div class="user-control-nav">
  <AicsTooltip
    Placement="@TooltipPlacement.RightEnd"
    Trigger="@TooltipTrigger.Click"
    Interactive="@true">
    <TooltipTarget>
      <div class="@HeaderClass">
        <div class="header__abbreviation">@Abbreviation</div>
        @if (ShowName)
        {
          <div class="header--info">
            <AicsEllipsis Show="@true" Text="@Name"/>
            @if (!string.IsNullOrEmpty(Role))
            {
              <div class="header--info__role">
                @Role
              </div>
            }
          </div>
        }
      </div>
    </TooltipTarget>
    <TooltipContent>
      <div class="@HeaderClass">
        <div class="header__abbreviation">@Abbreviation</div>
        @if (ShowName)
        {
          <div class="header--info">
            <AicsEllipsis Show="@true" Text="@Name"/>
            @if (!string.IsNullOrEmpty(Role))
            {
              <div class="header--info__role">
                @Role
              </div>
            }
          </div>
        }
      </div>
      <div class="user-control-nav--action">
        @foreach (var action in Actions)
        {
          if (action.Actions.Count > 0)
          {
            var action1 = action;
            <AicsTooltip
              Placement="@TooltipPlacement.RightStart"
              Trigger="@TooltipTrigger.Click">
              <TooltipTarget>
                <div class="group-action">
                  <div class="group-action--text">@action1.GroupName</div>
                  <div class="group-action--icon"
                       style="@Common.GetIcon(Common.HandlePath("images/component/arrow-right/normal.svg"))"></div>
                </div>
              </TooltipTarget>
              <TooltipContent>
                <div class="nav-group--action">
                  @foreach (var item in action.Actions)
                  {
                    <div
                      class="group--action__item"
                      @onclick="() => OnItemClick.InvokeAsync([action.GroupName, item])">
                      @item
                    </div>
                  }
                </div>
              </TooltipContent>
            </AicsTooltip>
          }
          else
          {
            <div
              class="nav--action__item"
              @onclick="() => OnItemClick.InvokeAsync([action.Action])">
              @action.Action
            </div>
          }
        }
      </div>
      <div class="nav--footer">
        <div class="nav--footer__content">@Footer.WebVersion</div>
        <AicsDivider/>
        <div class="nav--footer__content">@Footer.ServerVersion</div>
      </div>
    </TooltipContent>
  </AicsTooltip>
</div>

@code {

  [Parameter] public string Name { get; set; } = "User Name";
  [Parameter] public string Role { get; set; } = string.Empty;
  [Parameter] public bool ShowName { get; set; } = true;
  [Parameter] public List<UserAction> Actions { get; set; } = [];
  [Parameter] public UserFooter Footer { get; set; } = new();
  [Parameter] public EventCallback<bool> IsExpandChanged { get; set; }
  [Parameter] public EventCallback<List<string>> OnItemClick { get; set; }

  private string HeaderClass
  {
    get
    {
      var header = "user-control-nav--header";
      if (_headerHover) header += " header__hover";
      else if (_headerActive) header += " header__active";
      if (!ShowName) header += " without-name";
      return header;
    }
  }
  private string Abbreviation => Common.Abbreviation(Name);

  private bool _headerActive;
  private bool _headerHover;
  private bool _headerMouseEnter;

}