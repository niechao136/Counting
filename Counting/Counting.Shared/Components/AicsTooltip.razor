<div class="@TargetClass">
  <div
    class="tooltip--target"
    @ref="_target"
    @onclick="Click"
    @onblur="Blur"
    @onfocus="Focus"
    @onmouseenter="Mouseenter"
    @onmouseleave="Mouseleave">
    @TooltipTarget
  </div>
  @if (_show)
  {
    <div class="tooltip--warp">
      <div class="tooltip--background" @onclick="CloseBackdrop">
        <div
          @ref="_content"
          class="@ContentClass"
          style="@ContentStyle"
          @onclick="ClickContent"
          @onclick:preventDefault>
          <div class="tooltip-body" style="@BodyStyle">
            @TooltipBefore
            @if (!string.IsNullOrEmpty(Title))
            {
              <div class="tooltip--title">@Title</div>
              <AicsDivider/>
            }
            @TooltipContent
          </div>
        </div>
      </div>
    </div>
  }
</div>

@code {
  [Parameter] public RenderFragment? TooltipTarget { get; set; }
  [Parameter] public RenderFragment? TooltipContent { get; set; }
  [Parameter] public RenderFragment? TooltipBefore { get; set; }
  [Parameter] public string Placement { get; set; } = TooltipPlacement.Top;
  [Parameter] public string Trigger { get; set; } = TooltipTrigger.Mouseenter;
  [Parameter] public string Title { get; set; } = string.Empty;
  [Parameter] public string Width { get; set; } = string.Empty;
  [Parameter] public string CustomClass { get; set; } = string.Empty;
  [Parameter] public int OffsetX { get; set; }
  [Parameter] public int OffsetY { get; set; }
  [Parameter] public int MaxWidth { get; set; }
  [Parameter] public bool Interactive { get; set; }

  private string TargetClass => $"tooltip {Placement}";
  private string ContentClass => $"tooltip--content {CustomClass}";
  private string ContentStyle
  {
    get
    {
      var style = string.Empty;
      var top0 = $"top: calc({_targetRect.Top - 8 - _contentRect.Height + OffsetY}px);";
      var top1 = $"top: calc({_targetRect.Bottom - _contentRect.Height + OffsetY}px);";
      var top2 = $"top: calc({_targetRect.Top + _targetRect.Height * 0.5  - _contentRect.Height * 0.5 + OffsetY}px);";
      var top3 = $"top: calc({_targetRect.Top + OffsetY}px);";
      var top4 = $"top: calc({_targetRect.Bottom + 8 + OffsetY}px);";
      var left0 = $"left: calc({_targetRect.Left - 8 - _contentRect.Width + OffsetX}px);";
      var left1 = $"left: calc({_targetRect.Right - _contentRect.Width + OffsetX}px);";
      var left2 = $"left: calc({_targetRect.Left + _targetRect.Width * 0.5 - _contentRect.Width * 0.5 + OffsetX}px);";
      var left3 = $"left: calc({_targetRect.Left + OffsetX}px);";
      var left4 = $"left: calc({_targetRect.Right + 8 + OffsetX}px);";
      switch (Placement)
      {
        case TooltipPlacement.Top:
          style += $"{top0}{left2}";
          break;
        case TooltipPlacement.TopStart:
          style += $"{top0}{left3}";
          break;
        case TooltipPlacement.TopEnd:
          style += $"{top0}{left1}";
          break;
        case TooltipPlacement.Bottom:
          style += $"{top4}{left2}";
          break;
        case TooltipPlacement.BottomStart:
          style += $"{top4}{left3}";
          break;
        case TooltipPlacement.BottomEnd:
          style += $"{top4}{left1}";
          break;
        case TooltipPlacement.Left:
          style += $"{top2}{left0}";
          break;
        case TooltipPlacement.LeftStart:
          style += $"{top3}{left0}";
          break;
        case TooltipPlacement.LeftEnd:
          style += $"{top1}{left0}";
          break;
        case TooltipPlacement.Right:
          style += $"{top2}{left4}";
          break;
        case TooltipPlacement.RightStart:
          style += $"{top3}{left4}";
          break;
        case TooltipPlacement.RightEnd:
          style += $"{top1}{left4}";
          break;
      }
      var max = MaxWidth > 0 ? MaxWidth : 240;
      style += $"max-width: {max}px;";
      return style;
    }
  }
  private string BodyStyle => string.IsNullOrEmpty(Width) ? "" : $"width: {Width};";
  private bool _show;
  private ElementReference _target;
  private DomRect _targetRect = new();
  private ElementReference _content;
  private DomRect _contentRect = new();

  private DotNetObjectReference<AicsTooltip>? _reference;
  [JSInvokable]
  public void GetTargetRect(DomRect rect)
  {
    _targetRect = rect;
  }
  [JSInvokable]
  public void GetContentRect(DomRect rect)
  {
    _contentRect = rect;
  }

  private void Click()
  {
    if (Trigger == TooltipTrigger.Click)
    {
      _show = !_show;
    }
  }
  private void Blur()
  {
    if (Trigger == TooltipTrigger.Focus)
    {
      _show = false;
    }
  }
  private void Focus()
  {
    if (Trigger == TooltipTrigger.Focus)
    {
      _show = true;
    }
  }
  private void Mouseenter()
  {
    if (Trigger == TooltipTrigger.Mouseenter)
    {
      _show = true;
    }
  }
  private void Mouseleave()
  {
    if (Trigger == TooltipTrigger.Mouseenter)
    {
      _show = false;
    }
  }
  private void CloseBackdrop()
  {
    if (Trigger == TooltipTrigger.Click)
    {
      _show = false;
    }
  }
  private void ClickContent()
  {
    if (Trigger == TooltipTrigger.Click && !Interactive)
    {
      _show = false;
    }
  }



  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (Common.IsClient(JsRuntime))
    {
      _reference ??= DotNetObjectReference.Create(this);
      await JsRuntime.InvokeVoidAsync("window.AicsCommon.GetElement", _reference, _target, "GetTargetRect");
      await JsRuntime.InvokeVoidAsync("window.AicsCommon.GetElement", _reference, _content, "GetContentRect");
    }
  }

}
