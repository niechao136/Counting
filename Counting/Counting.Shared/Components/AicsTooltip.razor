<div class="@TargetClass">
  <div
    class="tooltip--target"
    @ref="_target"
    @onclick="Click"
    @onblur="Blur"
    @onfocus="Focus"
    @onmouseenter="Mouseenter"
    @onmouseleave="Mouseleave"
    @onmouseenter:stopPropagation
    @onmouseleave:stopPropagation>
    @TooltipTarget
  </div>
  @if (ShowBody)
  {
    @if (Trigger == TooltipTrigger.Click)
    {
      <div class="tooltip--warp">
        <div class="tooltip--background" @onclick="CloseBackdrop">
          <div
            @ref="_content"
            class="@ContentClass"
            style="@ContentStyle"
            @onclick="ClickContent"
            @onclick:preventDefault>
            <div class="tooltip-body" style="@BodyStyle">
              @TooltipBefore
              @if (!string.IsNullOrEmpty(Title))
              {
                <div class="tooltip--title">@Title</div>
                <AicsDivider/>
              }
              @TooltipContent
            </div>
          </div>
        </div>
      </div>
    }
    else
    {
      <div
        @ref="_content"
        class="@ContentClass"
        style="@ContentStyle">
        <div class="tooltip-body" style="@BodyStyle">
          @TooltipBefore
          @if (!string.IsNullOrEmpty(Title))
          {
            <div class="tooltip--title">@Title</div>
            <AicsDivider/>
          }
          @TooltipContent
        </div>
      </div>
    }
  }
</div>

@code {
  [Parameter] public RenderFragment? TooltipTarget { get; set; }
  [Parameter] public RenderFragment? TooltipContent { get; set; }
  [Parameter] public RenderFragment? TooltipBefore { get; set; }
  [Parameter] public string Placement { get; set; } = TooltipPlacement.Bottom;
  [Parameter] public string Trigger { get; set; } = TooltipTrigger.Mouseenter;
  [Parameter] public string Theme { get; set; } = TooltipTheme.Dark;
  [Parameter] public string Title { get; set; } = string.Empty;
  [Parameter] public string Width { get; set; } = string.Empty;
  [Parameter] public string CustomClass { get; set; } = string.Empty;
  [Parameter] public int OffsetX { get; set; }
  [Parameter] public int OffsetY { get; set; }
  [Parameter] public bool Interactive { get; set; }
  [Parameter] public bool Show { get; set; } = true;

  private string TargetClass => $"tooltip {Placement}";
  private string ContentClass => $"tooltip--content {CustomClass} {Theme}";
  private string ContentStyle
  {
    get
    {
      var style = string.Empty;
      var top = Trigger == TooltipTrigger.Click ? _rects[0].Top + OffsetY : OffsetY;
      var top0 = $"top: calc({top - 8 - _rects[1].Height}px);";
      var top1 = $"top: calc({top + _rects[0].Height - _rects[1].Height}px);";
      var top2 = $"top: calc({top + _rects[0].Height * 0.5  - _rects[1].Height * 0.5}px);";
      var top3 = $"top: calc({top}px);";
      var top4 = $"top: calc({top + _rects[0].Height + 8}px);";
      var left = Trigger == TooltipTrigger.Click ? _rects[0].Left + OffsetX : OffsetX;
      var left0 = $"left: calc({left - 8 - _rects[1].Width}px);";
      var left1 = $"left: calc({left + _rects[0].Width - _rects[1].Width}px);";
      var left2 = $"left: calc({left + _rects[0].Width * 0.5 - _rects[1].Width * 0.5}px);";
      var left3 = $"left: calc({left}px);";
      var left4 = $"left: calc({left + _rects[0].Width + 8}px);";
      switch (Placement)
      {
        case TooltipPlacement.Top:
          style += $"{top0}{left2}";
          break;
        case TooltipPlacement.TopStart:
          style += $"{top0}{left3}";
          break;
        case TooltipPlacement.TopEnd:
          style += $"{top0}{left1}";
          break;
        case TooltipPlacement.Bottom:
          style += $"{top4}{left2}";
          break;
        case TooltipPlacement.BottomStart:
          style += $"{top4}{left3}";
          break;
        case TooltipPlacement.BottomEnd:
          style += $"{top4}{left1}";
          break;
        case TooltipPlacement.Left:
          style += $"{top2}{left0}";
          break;
        case TooltipPlacement.LeftStart:
          style += $"{top3}{left0}";
          break;
        case TooltipPlacement.LeftEnd:
          style += $"{top1}{left0}";
          break;
        case TooltipPlacement.Right:
          style += $"{top2}{left4}";
          break;
        case TooltipPlacement.RightStart:
          style += $"{top3}{left4}";
          break;
        case TooltipPlacement.RightEnd:
          style += $"{top1}{left4}";
          break;
      }
      double.TryParse(Width, out var width);
      var max = width > 0 ? width : 350;
      style += $"max-width: {max}px;";
      return style;
    }
  }
  private string BodyStyle => string.IsNullOrEmpty(Width) ? "" : $"width: {Width};";
  private bool ShowBody => Show && _show;
  private bool _show;
  private ElementReference _target;
  private ElementReference _content;
  private List<DomRect> _rects = [new(), new()];

  private DotNetObjectReference<AicsTooltip>? _reference;
  [JSInvokable]
  public void GetRect(DomRect rect, int index)
  {
    _rects[index] = rect;
  }

  private void Click()
  {
    if (Trigger == TooltipTrigger.Click)
    {
      _show = !_show;
    }
  }
  private void Blur()
  {
    if (Trigger == TooltipTrigger.Focus)
    {
      _show = false;
    }
  }
  private void Focus()
  {
    if (Trigger == TooltipTrigger.Focus)
    {
      _show = true;
    }
  }
  private void Mouseenter()
  {
    if (Trigger == TooltipTrigger.Mouseenter)
    {
      _show = true;
    }
  }
  private void Mouseleave()
  {
    if (Trigger == TooltipTrigger.Mouseenter)
    {
      _show = false;
    }
  }
  private void CloseBackdrop()
  {
    if (Trigger == TooltipTrigger.Click)
    {
      _show = false;
    }
  }
  private void ClickContent()
  {
    if (Trigger == TooltipTrigger.Click && !Interactive)
    {
      _show = false;
    }
  }



  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (Common.IsClient(JsRuntime))
    {
      _reference ??= DotNetObjectReference.Create(this);
      await JsRuntime.InvokeVoidAsync("window.AicsCommon.GetElement", _reference, _target, "GetRect", 0);
      await JsRuntime.InvokeVoidAsync("window.AicsCommon.GetElement", _reference, _content, "GetRect", 1);
    }
  }

}
