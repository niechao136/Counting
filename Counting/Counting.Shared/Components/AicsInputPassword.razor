<AicsInputText
  Size="@Size"
  Placeholder="@Placeholder"
  Disable="Disable"
  Readonly="Readonly"
  AutoComplete="@AutoComplete"
  Name="@Name"
  Class="@Class"
  AutoFocus="@AutoFocus"
  MaxLength="@MaxLength"
  MinLength="@MinLength"
  IsError="@IsError"
  ErrorMessage="@ErrorMessage"
  Is100="@Is100"
  AfterObject="IconObject"
  Type="@Type"
  @bind-Value="CurrentValue"
  OnBlur="OnBlur"
  OnFocus="OnFocus"
  OnIconClick="IconClick"
  OnKeydown="OnKeydown"
  OnKeyup="OnKeyup"
  OnInput="OnInput"
/>

@code {
  [Parameter] public string AutoComplete { get; set; } = InputAutoComplete.On;
  [Parameter] public bool AutoFocus { get; set; }
  [Parameter] public bool Disable { get; set; }
  [Parameter] public bool Readonly { get; set; }
  [Parameter] public int MaxLength { get; set; } = 524288;
  [Parameter] public int MinLength { get; set; }
  [Parameter] public bool IsError { get; set; }
  [Parameter] public string ErrorMessage { get; set; } = string.Empty;
  [Parameter] public bool Is100 { get; set; }
  [Parameter] public string Name { get; set; } = string.Empty;
  [Parameter] public string Class { get; set; } = string.Empty;
  [Parameter] public string Size { get; set; } = InputSize.Medium;
  [Parameter] public string Placeholder { get; set; } = string.Empty;
  [Parameter] public string Value { get; set; } = string.Empty;
  [Parameter] public EventCallback<string> ValueChanged { get; set; }
  [Parameter] public EventCallback<FocusEventArgs> OnBlur { get; set; }
  [Parameter] public EventCallback<FocusEventArgs> OnFocus { get; set; }
  [Parameter] public EventCallback<KeyboardEventArgs> OnKeydown { get; set; }
  [Parameter] public EventCallback<KeyboardEventArgs> OnKeyup { get; set; }
  [Parameter] public EventCallback<MouseEventArgs> OnIconClick { get; set; }
  [Parameter] public EventCallback<string> OnChange { get; set; }
  [Parameter] public EventCallback<string> OnInput { get; set; }

  private string CurrentValue
  {
    get => Value;
    set
    {
      Value = value;
      ValueChanged.InvokeAsync(Value);
      OnChange.InvokeAsync(Value);
    }
  }

  private IconSrc IconObject => _showPassword
    ? new IconSrc
    {
      Normal = Common.HandlePath("images/component/input/password/show/header-back.svg"),
      Active = Common.HandlePath("images/component/input/password/show/active.svg"),
      Hover = Common.HandlePath("images/component/input/password/show/hover.svg"),
      Disable = Common.HandlePath("images/component/input/password/show/disable.svg")
    }
    : new IconSrc
    {
      Normal = Common.HandlePath("images/component/input/password/hide/header-back.svg"),
      Active = Common.HandlePath("images/component/input/password/hide/active.svg"),
      Hover = Common.HandlePath("images/component/input/password/hide/hover.svg"),
      Disable = Common.HandlePath("images/component/input/password/hide/disable.svg")
    };
  private string Type => _showPassword ? InputType.Text : InputType.Password;

  private bool _showPassword;

  private void IconClick(MouseEventArgs args)
  {
    _showPassword = !_showPassword;
    OnIconClick.InvokeAsync(args);
  }
}