<div class="@LayoutClass">
  @if (_showSide)
  {
    <aside>
      <AicsLayoutNav
        IsExpand="@_isExpand"
        NavList="NavList"
        UserActions="@UserActions"
        UserFooter="@UserFooter"
        UserName="@UserName"
        UserRole="@UserRole"
        OnToggle="() => _isExpand = !_isExpand"/>
    </aside>
  }
  <main>
    <header class="header">
      @if (!_showSide)
      {
        <div class="header--nav">
          <AicsButton
            Type="@ButtonType.OnStrong"
            Mode="@ButtonMode.Text"
            BeforeString="@Common.HandlePath("images/component/layout/menu.svg")"
            OnClick="MenuClick"/>
        </div>
      }
      @if (ShowBack && _showSide)
      {
        <div class="header--back">
          <AicsButton
            Class="header--back-icon"
            Type="@ButtonType.OnStrong"
            Mode="@ButtonMode.Text"
            BeforeString="@Common.HandlePath("images/component/layout/header-back.svg")"
            OnClick="BackClick"/>
        </div>
      }
      <div class="@TitleClass">
        @if (Breadcrumbs.Count > 0 && _showSide)
        {
          <div class="header--title--breadcrumb">
            @for (var i = 0; i < Breadcrumbs.Count; i++)
            {
              var breadcrumb = Breadcrumbs[i];
              var index = i;
              <AicsButton
                Size="@ButtonSize.Small"
                Type="@ButtonType.OnStrong"
                Mode="@ButtonMode.Text"
                Text="@breadcrumb.Text"
                Disable="@breadcrumb.Disabled"
                OnClick="@(args => BreadcrumbClick.InvokeAsync((args, index, breadcrumb)))"/>
              <img alt="" src="@Common.HandlePath("images/component/layout/next.svg")"/>
            }
          </div>
        }
        <div class="header--title--content">@Title</div>
      </div>
      <div class="header--slot">
        @HeaderSlot
      </div>
    </header>
    <div class="body">
      @BodySlot
    </div>
  </main>
  <div class="@NavHiddenClass">
    <div class="nav-hidden--background" @onclick="CloseBackdrop">
      <div class="nav-hidden--main" @onclick:stopPropagation>
        <AicsLayoutNav
          IsExpand="@_isExpand"
          NavList="NavList"
          ItemClick="CloseBackdrop"
          UserActions="@UserActions"
          UserFooter="@UserFooter"
          UserName="@UserName"
          UserRole="@UserRole"
          OnToggle="() => _showMenu = !_showMenu"/>
      </div>
    </div>
  </div>
</div>

@code {
  #region Side
  #region Nav

  [Parameter] public List<NavSub> NavList { get; set; } = [];

  private string NavHiddenClass => $"nav-hidden{(_showMenu ? " display-black" : " display-none")}";

  private bool _isExpand = true;
  private bool _showMenu;

  private void CloseBackdrop()
  {
    _showMenu = false;
  }

  #endregion
  #region Brand

  [Parameter] public bool ShowBrand { get; set; } = true;
  [Parameter] public string BrandId { get; set; } = "Brand Id";
  [Parameter] public List<DropdownOption> BrandOption { get; set; } = [];

  #endregion
  #region User Control

  [Parameter] public string UserName { get; set; } = "User Name";
  [Parameter] public string UserRole { get; set; } = string.Empty;
  [Parameter] public List<UserAction> UserActions { get; set; } = [];
  [Parameter] public UserFooter UserFooter { get; set; } = new();

  #endregion
  #endregion
  #region Header

  [Parameter] public bool ShowBack { get; set; } = true;
  [Parameter] public EventCallback<MouseEventArgs> BackClick { get; set; }
  [Parameter] public List<HeaderBreadcrumb> Breadcrumbs { get; set; } = [];
  [Parameter] public EventCallback<(MouseEventArgs, int, HeaderBreadcrumb)> BreadcrumbClick { get; set; }
  [Parameter] public string Title { get; set; } = "Page Title";
  [Parameter] public RenderFragment? HeaderSlot { get; set; }

  private string TitleClass => $"header--title{(Breadcrumbs.Count > 0 ? " with-breadcrumb" : "")}";

  private void MenuClick()
  {
    _showMenu = true;
  }

  #endregion
  #region Body

  [Parameter] public RenderFragment? BodySlot { get; set; }

  #endregion
  #region Layout

  private string LayoutClass => $"layout {(_showSide ? _isExpand ? "nav-open" : "nav-close" : "no-side")}";

  private bool _showSide = true;
  private DotNetObjectReference<AicsLayout>? _reference;

  [JSInvokable]
  public void GetWindowWidth(int width)
  {
    var change = false;
    switch (width)
    {
      case > 1366:
        if (!_showSide)
        {
          _showSide = true;
          change = true;
        }
        if (!_isExpand)
        {
          _isExpand = true;
          change = true;
        }
        break;
      case > 767:
        if (!_showSide)
        {
          _showSide = true;
          change = true;
        }
        if (_isExpand)
        {
          _isExpand = false;
          change = true;
        }
        break;
      case <= 767:
        if (_showSide)
        {
          _showSide = false;
          change = true;
        }
        if (!_isExpand)
        {
          _isExpand = true;
          change = true;
        }
        break;
    }
    if (change) InvokeAsync(StateHasChanged);
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (Common.IsClient(JsRuntime) && firstRender)
    {
      _reference ??= DotNetObjectReference.Create(this);
      await JsRuntime.InvokeVoidAsync("window.AicsCommon.GetWindowWidth", _reference, "GetWindowWidth");
    }
  }

  #endregion
}