<div class="@NavClass">
  @if (IsExpand)
  {
    <div class="nav--logo nav--logo_open">
      <div class="logo_box">
        <a class="logo_box-img" href="@HomeHref">
          <img src="@LogoImg" alt=""/>
        </a>
        <div class="logo_box-toggle" @onclick="OnToggle" @onclick:stopPropagation="@true">
          <div class="toggle-img"></div>
        </div>
      </div>
      @if (!string.IsNullOrEmpty(Subtitle))
      {
        <div class="nav--logo__subtitle">
          @Subtitle
        </div>
      }
    </div>
  }
  else
  {
    <div class="nav--logo nav--logo_close">
      <div class="logo_box">
        <a class="logo_box-img" href="@HomeHref">
          <div class="home-img"></div>
        </a>
        <div class="logo_box-toggle" @onclick="OnToggle" @onclick:stopPropagation="@true">
          <div class="toggle-img"></div>
        </div>
      </div>
    </div>
  }
  <div class="menu">
    @for (var index = 0; index < NavList.Count; index++)
    {
      var sub = NavList[index];
      @if (sub.Children.Count > 0)
      {
        var i = index;
        <AicsNavItem
          Item="@sub"
          Open="@IsExpand"
          OnClick="ItemClick"
          IsExpand="@_expand[i]"
          IsExpandChanged="b => Expand(i, b)"/>
      }
      else
      {
        <NavLink class="@ItemClass(sub.Href)" href="@sub.Href" @onclick="ItemClick">
          <div class="menu-item--icon" style="@Common.GetIcon(sub.Icon)"></div>
          <div class="menu-item--text">@sub.Title</div>
        </NavLink>
      }
    }
  </div>
  <AicsUserControlNav
    Actions="@UserActions"
    Footer="@UserFooter"
    Name="@UserName"
    Open="@IsExpand"
    Role="@UserRole"/>
</div>

@code {

  [Parameter] public bool IsExpand { get; set; } = true;
  [Parameter] public string LogoImg { get; set; } = Common.HandlePath("images/component/layout/logo-nav.png");
  [Parameter] public bool ShowBrand { get; set; } = true;
  [Parameter] public string Subtitle { get; set; } = "Subtitle Name";
  [Parameter] public string HomeHref { get; set; } = "/Overview";
  [Parameter] public EventCallback<MouseEventArgs> OnToggle { get; set; }
  [Parameter] public string BrandId { get; set; } = "Brand Id";
  [Parameter] public List<DropdownOption> BrandOption { get; set; } = [];
  [Parameter] public List<NavSub> NavList { get; set; } = [];
  [Parameter] public EventCallback<MouseEventArgs> ItemClick { get; set; }
  [Parameter] public string UserName { get; set; } = "User Name";
  [Parameter] public string UserRole { get; set; } = string.Empty;
  [Parameter] public List<UserAction> UserActions { get; set; } = [];
  [Parameter] public UserFooter UserFooter { get; set; } = new();

  private string NavClass => $"nav nav--{(IsExpand ? "open" : "close")}";

  private Dictionary<int, bool> _expand = new();

  private string ItemClass(string path)
  {
    return $"menu-item{(Navigation.Uri.Split("?")[0].EndsWith(path) ? " active" : "")} {(IsExpand ? "open" : "close")}";
  }

  private void Expand(int index, bool expand)
  {
    if (expand)
    {
      foreach (var item in _expand)
      {
        _expand[item.Key] = false;
      }
    }
    _expand[index] = expand;
  }

  protected override void OnInitialized()
  {
    for (var i = 0; i < NavList.Count; i++)
    {
      var sub = NavList[i].Children.SingleOrDefault(sub => Navigation.Uri.Split("?")[0].EndsWith(sub.Href));
      _expand[i] = sub != null;
    }
    base.OnInitialized();
  }

}