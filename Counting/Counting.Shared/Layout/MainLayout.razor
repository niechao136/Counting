@inherits LayoutComponentBase

<AicsLayout
  Breadcrumbs="@_breadcrumbs"
  NavList="@_nav"
  ShowBack="@_showBack"
  Title="@_title"
  UserActions="@_actions"
  UserFooter="@_footer"
  UserName="@_name"
  UserRole="@_role">
  <BodySlot>
    @Body
    <BaseLayout/>
  </BodySlot>
</AicsLayout>

<div id="blazor-error-ui" data-nosnippet>
  An unhandled error has occurred.
  <a href="." class="reload">Reload</a>
  <span class="dismiss">🗙</span>
</div>

@code
{
  #region Header

  private string _title = string.Empty;
  private List<HeaderBreadcrumb> _breadcrumbs = [];
  private bool _showBack;

  #endregion
  #region Side
  #region Nav

  private readonly List<NavSub> _nav = [
    new()
    {
      Title = "Overview",
      Href = "/Overview",
      Icon = Common.HandlePath("images/nav/overview.svg")
    },
    new()
    {
      Title = "Notification",
      Href = "/Notify",
      Icon = Common.HandlePath("images/nav/event.svg")
    },
    new()
    {
      Title = "Cross Sites",
      Icon = Common.HandlePath("images/nav/cross-store.svg"),
      Children = [
        new NavBase
        {
          Title = "Ranking",
          Href = "/Ranking",
        },
        new NavBase
        {
          Title = "Data Analysis",
          Href = "/Cross",
        },
      ]
    },
    new()
    {
      Title = "Single Site",
      Icon = Common.HandlePath("images/nav/store-analysis.svg"),
      Children = [
        new NavBase
        {
          Title = "KPI Review",
          Href = "/Kpi",
        },
        new NavBase
        {
          Title = "Data Analysis",
          Href = "/Single",
        },
      ]
    },
    new()
    {
      Title = "Queuing",
      Icon = Common.HandlePath("images/nav/queuing.svg"),
      Children = [
        new NavBase
        {
          Title = "Real-time Status",
          Href = "/RealTime",
        },
        new NavBase
        {
          Title = "Event",
          Href = "/Event",
        },
        new NavBase
        {
          Title = "History Data",
          Href = "/History",
        },
      ]
    },
    new()
    {
      Title = "Data Report",
      Icon = Common.HandlePath("images/nav/data-report.svg"),
      Children = [
        new NavBase
        {
          Title = "Sales Report",
          Href = "/Sales",
        },
        new NavBase
        {
          Title = "Traffic Report",
          Href = "/Traffic",
        },
        new NavBase
        {
          Title = "Weekly Report",
          Href = "/Weekly",
        },
      ]
    },
    new()
    {
      Title = "Setting",
      Icon = Common.HandlePath("images/nav/setting.svg"),
      Children = [
        new NavBase
        {
          Title = "Counting Unit",
          Href = "/Counting",
        },
        new NavBase
        {
          Title = "Queuing Unit",
          Href = "/Queuing",
        },
        new NavBase
        {
          Title = "Queuing Rule",
          Href = "/QueuingRule",
        },
        new NavBase
        {
          Title = "Schedule Rule",
          Href = "/Schedule",
        },
        new NavBase
        {
          Title = "Alert Rule",
          Href = "/AlertRule",
        },
        new NavBase
        {
          Title = "Notify",
          Href = "/NotifyRule",
        },
        new NavBase
        {
          Title = "Weekly Report",
          Href = "/Setting",
        },
      ]
    },
  ];

  #endregion
  #region User Control

  private string _name = string.Empty;
  private string _role = string.Empty;
  private UserFooter _footer = new();
  private readonly List<UserAction> _actions = [
    new()
    {
      GroupName = "Change Language",
      Actions = ["English", "简体中文", "繁體中文"]
    },
    new()
    {
      Action = "Change Password"
    },
    new()
    {
      Action = "Logout"
    }
  ];

  private async Task GetVersion()
  {
    var str = await Api.PostAsync("/api/server/info");
    var res = JsonConvert.DeserializeObject<JObject>(str);
    LoginStore.Version.OnNext(res?["version"]?.ToString() ?? string.Empty);
    LoginStore.IsPrivate.OnNext(res?["cloud"]?.ToString() == "Private");
  }
  private async Task GetOwner()
  {
    var data = new JObject
    {
      new JProperty("user_id", LoginStore.UserId.Value),
      new JProperty("token", LoginStore.Token.Value)
    };
    var str = await Api.PostAsync("/api/user/info", data);
    var res = JsonConvert.DeserializeObject<JObject>(str);
    LoginStore.Owner.OnNext(res?["user"] ?? null);
  }

  #endregion
  #endregion
  #region Init

  protected override void OnInitialized()
  {
    AppStore.TitleList.Subscribe(onNext: list =>
    {
      if (!list.Any()) return;
      _title = list.Any() ? list[^1] : string.Empty;
      _breadcrumbs = list.Any() ? list[..^1].Select(text => new HeaderBreadcrumb { Text = text }).ToList() : [];
      InvokeAsync(StateHasChanged);
    });
    AppStore.TitleCount.Subscribe(onNext: count =>
    {
      if (_showBack == count > 0) return;
      _showBack = count > 0;
      InvokeAsync(StateHasChanged);
    });
  }
  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender && Common.IsClient(JsRuntime))
    {
      AppStore.StartLoading("layout");
      await Session.InitAsync(JsRuntime);
      if (LoginStore.Token.Value == null)
      {
        Navigation.NavigateTo("/");
        AppStore.CloseLoading();
        return;
      }

      await GetVersion();
      _footer = new UserFooter
      {
        ServerVersion = LoginStore.Version.Value,
        WebVersion = AppSetting.Get("INFO:VERSION")
      };

      await GetOwner();
      _name = LoginStore.Owner.Value?["fullname"]?.ToString() ?? string.Empty;
      int.TryParse(LoginStore.Owner.Value?["roleid"]?.ToString(), out var role);
      _role = Common.UserRole[role];
      await InvokeAsync(StateHasChanged);
      AppStore.StopLoading("layout");
    }
  }

  #endregion
}
