@page "/"
@layout LoginLayout

<PageTitle>Login</PageTitle>

<AicsLogin
  @bind-Form="_form"
  Footer="@_footer"
  AllowLogin="@AllowLogin"
  OnSubmit="SubmitLogin"/>

@code {
  #region Login

  private LoginForm _form = new();

  private bool AllowLogin => !string.IsNullOrEmpty(_form.Account) && !string.IsNullOrEmpty(_form.Password);

  private async Task SubmitLogin()
  {
    if (!Common.EmailRegex.IsMatch(_form.Account))
    {
      _form.ErrorMessage = "Please enter a valid email Please enter a valid email Please enter a valid email";
    }
    else
    {
      AppStore.StartLoading("login");
      var data = new JObject
      {
        new JProperty("password", Common.Md5String(_form.Password)),
        new JProperty("username", _form.Account),
        new JProperty("app_sec", new JObject
        {
          new JProperty("package", "storevue"),
          new JProperty("type", "web")
        })
      };
      var str = await Api.PostAsync("/api/login", data);
      var res = JsonConvert.DeserializeObject<JObject>(str);
      if (Convert.ToInt64(res?["status"]) == 1)
      {
        if (_form.RememberMe)
        {
          await Local.SetAsync(JsRuntime, "BLAZOR_COUNTING_REMEMBER", "true");
          await Local.SetAsync(JsRuntime, "BLAZOR_COUNTING_EMAIL", _form.Account);
        }
        else
        {
          await Local.DeleteAsync(JsRuntime, "BLAZOR_COUNTING_REMEMBER");
          await Local.DeleteAsync(JsRuntime, "BLAZOR_COUNTING_EMAIL");
        }
        await Session.LoginAsync(JsRuntime, str);
        Navigation.NavigateTo("/overview");
      }
      AppStore.StopLoading("login");
    }
  }

  #endregion
  #region Footer

  private LoginFooter _footer = new();

  private async Task GetVersion()
  {
    var str = await Api.PostAsync("/api/server/info");
    var res = JsonConvert.DeserializeObject<JObject>(str);
    LoginStore.Version.OnNext(res?["version"]?.ToString() ?? string.Empty);
    LoginStore.IsPrivate.OnNext(res?["cloud"]?.ToString() == "Private");
  }

  #endregion
  #region Forget



  #endregion
  #region Init

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender && Common.IsClient(JsRuntime))
    {
      var remember = await Local.GetAsync(JsRuntime, "BLAZOR_COUNTING_REMEMBER") == "true";
      if (remember)
      {
        _form = new LoginForm
        {
          Account = await Local.GetAsync(JsRuntime, "BLAZOR_COUNTING_EMAIL"),
          Password = string.Empty,
          ErrorMessage = string.Empty,
          RememberMe = remember
        };
      }

      await GetVersion();
      _footer = new LoginFooter
      {
        Copyright = AppSetting.Get("INFO:COPYRIGHT"),
        ServerVersion = LoginStore.Version.Value,
        WebVersion = AppSetting.Get("INFO:VERSION")
      };
      await InvokeAsync(StateHasChanged);
    }
  }

  #endregion
}